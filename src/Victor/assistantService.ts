interface Question {
  question_id: string;
  question: string;
  type_answer: string;
}

interface QuestionData {
  questions: Question[];
}

interface AnswerResponse {
  [questionId: string]: any;
}

interface VoiceAssistantWindow extends Window {
  conversationComplete?: boolean;
}

export const talk_to_assistant_answer = async (questions: QuestionData): Promise<AnswerResponse> => {
  console.log('Talk to assistant answer called with questions:', questions);
  
  return new Promise((resolve, reject) => {
    // Create a promise that will be resolved when the voice assistant completes
    let isResolved = false;
    
    const handleAnswersGenerated = (answers: AnswerResponse) => {
      if (!isResolved) {
        isResolved = true;
        console.log('Voice assistant generated answers:', answers);
        resolve(answers);
      }
    };
    
    // Create a custom event listener for the voice assistant
    const messageHandler = (event: MessageEvent) => {
      if (event.data && event.data.type === 'VOICE_ANSWERS_GENERATED') {
        handleAnswersGenerated(event.data.answers);
        window.removeEventListener('message', messageHandler);
      }
    };
    
    window.addEventListener('message', messageHandler);
    
    // Dispatch a custom event to trigger the voice assistant in form completion mode
    window.dispatchEvent(new CustomEvent('OPEN_VOICE_ASSISTANT', {
      detail: {
        mode: 'form_completion',
        questions: questions.questions,
        onAnswersGenerated: handleAnswersGenerated
      }
    }));
    
    // Fallback timeout in case voice assistant doesn't respond
    setTimeout(() => {
      if (!isResolved) {
        isResolved = true;
        window.removeEventListener('message', messageHandler);
        
        console.log('Voice assistant timeout, using fallback dummy answers');
        
        // Provide fallback dummy answers
        const dummyAnswers: AnswerResponse = {};
        
        questions.questions.forEach((question) => {
          switch (question.type_answer.toLowerCase()) {
            case 'text':
              dummyAnswers[question.question_id] = 'Sample text response generated by AI';
              break;
            case 'textarea':
            case 'long_text':
              dummyAnswers[question.question_id] = 'This is a longer text response generated by the AI assistant. It provides more detailed information and demonstrates how the assistant can fill textarea fields with comprehensive answers.';
              break;
            case 'number':
              dummyAnswers[question.question_id] = '42';
              break;
            case 'email':
              dummyAnswers[question.question_id] = 'ai.assistant@example.com';
              break;
            case 'radio':
            case 'choice':
              dummyAnswers[question.question_id] = 'yes';
              break;
            case 'checkbox':
              dummyAnswers[question.question_id] = true;
              break;
            default:
              dummyAnswers[question.question_id] = 'AI generated answer';
          }
        });
        
        resolve(dummyAnswers);
      }
    }, 30000); // 30 second timeout
  });
};