interface Question {
  question_id: string;
  question: string;
  type_answer: string;
}

interface QuestionData {
  questions: Question[];
}

interface AnswerResponse {
  [questionId: string]: any;
}

export const talk_to_assistant_answer = (questions: QuestionData): Promise<AnswerResponse> => {
  console.log('Talk to assistant answer called with questions:', questions);
  
  // Dummy implementation for testing
  return new Promise((resolve) => {
    setTimeout(() => {
      const dummyAnswers: AnswerResponse = {};
      
      questions.questions.forEach((question) => {
        // Parse question to extract options for radio/checkbox
        let questionText = question.question;
        let options: string[] = [];
        
        if (question.question.includes('|OPTIONS:')) {
          const [text, optionsString] = question.question.split('|OPTIONS:');
          questionText = text;
          options = optionsString.split('||').filter(opt => opt.trim() !== '');
        }
        
        switch (question.type_answer.toLowerCase()) {
          case 'text':
            dummyAnswers[question.question_id] = 'Sample text response generated by AI';
            break;
          case 'textarea':
          case 'long_text':
            dummyAnswers[question.question_id] = 'This is a longer text response generated by the AI assistant. It provides more detailed information and demonstrates how the assistant can fill textarea fields with comprehensive answers.';
            break;
          case 'number':
            dummyAnswers[question.question_id] = '42';
            break;
          case 'email':
            dummyAnswers[question.question_id] = 'ai.assistant@example.com';
            break;
          case 'radio':
          case 'choice':
            // Use first available option or default to 'yes'
            dummyAnswers[question.question_id] = options.length > 0 ? options[0] : 'yes';
            break;
          case 'checkbox':
            // For checkboxes, select random options or default to true
            if (options.length > 0) {
              const selectedOptions = options.filter((_, index) => Math.random() > 0.5);
              dummyAnswers[question.question_id] = selectedOptions.length > 0 ? selectedOptions : [options[0]];
            } else {
              dummyAnswers[question.question_id] = true;
            }
            break;
          default:
            dummyAnswers[question.question_id] = 'AI generated answer';
        }
      });
      
      resolve(dummyAnswers);
    }, 1500); // Simulate API call delay
  });
};