interface FormUpdater {
  setFormTitle: (title: string) => void;
  setFormDescription: (description: string) => void;
  setQuestions: (questions: any[]) => void;
}

interface VoiceAssistantWindow extends Window {
  conversationComplete?: boolean;
}

export const talk_to_assistant = async (current_form_id: string, formUpdater?: FormUpdater) => {
  console.log('Talk to assistant called with form ID:', current_form_id);
  
  if (!formUpdater) return;
  
  try {
    // Open the voice interface in a new window
    const voiceWindow = window.open(
      '/src/Nikita/frontend/example.html',
      'voice-assistant',
      'width=800,height=600,resizable=yes,scrollbars=yes'
    ) as VoiceAssistantWindow;

    if (!voiceWindow) {
      throw new Error('Could not open voice assistant window. Please allow popups.');
    }

    // Show loading state
    formUpdater.setFormTitle('üé§ Voice Assistant Active...');
    formUpdater.setFormDescription('Speak with the assistant to define your form requirements. The window will close automatically when done.');
    formUpdater.setQuestions([]);

    // Poll for window closure and then fetch the form data
    const checkWindowClosed = () => {
      if (voiceWindow.closed) {
        console.log('Voice assistant window closed, fetching form data...');
        fetchGeneratedForm(formUpdater);
      } else {
        setTimeout(checkWindowClosed, 1000);
      }
    };

    // Start checking after a short delay
    setTimeout(checkWindowClosed, 2000);

  } catch (error) {
    console.error('Error opening voice assistant:', error);
    
    // Fallback to dummy data if voice interface fails
    formUpdater.setFormTitle('AI Generated Form: Customer Feedback Survey');
    formUpdater.setFormDescription('This form was generated by AI to collect customer feedback and improve our services.');
    formUpdater.setQuestions([
      {
        id: Date.now().toString(),
        question: 'How would you rate our service?',
        type: 'radio',
        required: true,
        options: ['Excellent', 'Good', 'Fair', 'Poor']
      },
      {
        id: (Date.now() + 1).toString(),
        question: 'What can we improve?',
        type: 'textarea',
        required: false
      },
      {
        id: (Date.now() + 2).toString(),
        question: 'Your email address',
        type: 'email',
        required: true
      },
      {
        id: (Date.now() + 3).toString(),
        question: 'Would you recommend us to others?',
        type: 'checkbox',
        required: false
      }
    ]);
  }
};

const fetchGeneratedForm = async (formUpdater: FormUpdater) => {
  try {
    // Show loading state
    formUpdater.setFormTitle('üîÑ Processing your conversation...');
    formUpdater.setFormDescription('Generating form based on your voice interaction...');
    
    // Wait a bit for the analysis to complete
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Fetch the generated form from the API
    const response = await fetch('http://localhost:3001/api/generate-form');
    
    if (!response.ok) {
      throw new Error(`API responded with status: ${response.status}`);
    }
    
    const formData = await response.json();
    
    if (formData.error) {
      throw new Error(formData.error);
    }
    
    // Update the form with the generated data
    if (formData.title) {
      formUpdater.setFormTitle(formData.title);
    }
    
    if (formData.description) {
      formUpdater.setFormDescription(formData.description);
    }
    
    if (formData.questions && formData.questions.length > 0) {
      formUpdater.setQuestions(formData.questions);
    }
    
    console.log('Form generated successfully:', formData);
    
  } catch (error) {
    console.error('Error fetching generated form:', error);
    
    // Show error state
    formUpdater.setFormTitle('‚ö†Ô∏è Error Processing Voice Input');
    formUpdater.setFormDescription('Could not process your voice conversation. Please try again or contact support.');
    formUpdater.setQuestions([
      {
        id: Date.now().toString(),
        question: 'This is a fallback question - please try the voice assistant again',
        type: 'text',
        required: false
      }
    ]);
  }
};